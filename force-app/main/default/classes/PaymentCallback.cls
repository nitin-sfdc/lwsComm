//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class PaymentCallback {

	public class Entity_Z {
		public String id {get;set;} 
		public String entity {get;set;} 
		public Integer amount {get;set;} 
		public Integer amount_paid {get;set;} 
		public Integer amount_due {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String receipt {get;set;} 
		public Object offer_id {get;set;} 
		public String status {get;set;} 
		public Integer attempts {get;set;} 
		public Notes notes {get;set;} 
		public Integer created_at {get;set;} 

		public Entity_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'entity') {
							entity = parser.getText();
						} else if (text == 'amount') {
							amount = parser.getIntegerValue();
						} else if (text == 'amount_paid') {
							amount_paid = parser.getIntegerValue();
						} else if (text == 'amount_due') {
							amount_due = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'receipt') {
							receipt = parser.getText();
						} else if (text == 'offer_id') {
							offer_id = parser.readValueAs(Object.class);
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'attempts') {
							attempts = parser.getIntegerValue();
						} else if (text == 'notes') {
							notes = new Notes(parser);
						} else if (text == 'created_at') {
							created_at = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Entity_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Order {
		public Entity_Z entity {get;set;} 

		public Order(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'entity') {
							entity = new Entity_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Order consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Entity {
		public String id {get;set;} 
		public String entity {get;set;} 
		public Integer amount {get;set;} 
		public String currency_Z {get;set;} // in json: currency
		public String status {get;set;} 
		public String order_id {get;set;} 
		public Object invoice_id {get;set;} 
		public Boolean international {get;set;} 
		public String method {get;set;} 
		public Integer amount_refunded {get;set;} 
		public Object refund_status {get;set;} 
		public Boolean captured {get;set;} 
		public String description {get;set;} 
		public Object card_id {get;set;} 
		public Object bank {get;set;} 
		public Object wallet {get;set;} 
		public String vpa {get;set;} 
		public String email {get;set;} 
		public String contact {get;set;} 
		public Notes notes {get;set;} 
		public Integer fee {get;set;} 
		public Integer tax {get;set;} 
		public Object error_code {get;set;} 
		public Object error_description {get;set;} 
		public Object error_source {get;set;} 
		public Object error_step {get;set;} 
		public Object error_reason {get;set;} 
		public Acquirer_data acquirer_data {get;set;} 
		public Integer created_at {get;set;} 

		public Entity(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'entity') {
							entity = parser.getText();
						} else if (text == 'amount') {
							amount = parser.getIntegerValue();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'order_id') {
							order_id = parser.getText();
						} else if (text == 'invoice_id') {
							invoice_id = parser.readValueAs(Object.class);
						} else if (text == 'international') {
							international = parser.getBooleanValue();
						} else if (text == 'method') {
							method = parser.getText();
						} else if (text == 'amount_refunded') {
							amount_refunded = parser.getIntegerValue();
						} else if (text == 'refund_status') {
							refund_status = parser.readValueAs(Object.class);
						} else if (text == 'captured') {
							captured = parser.getBooleanValue();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'card_id') {
							card_id = parser.readValueAs(Object.class);
						} else if (text == 'bank') {
							bank = parser.readValueAs(Object.class);
						} else if (text == 'wallet') {
							wallet = parser.readValueAs(Object.class);
						} else if (text == 'vpa') {
							vpa = parser.getText();
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'contact') {
							contact = parser.getText();
						} else if (text == 'notes') {
							notes = new Notes(parser);
						} else if (text == 'fee') {
							fee = parser.getIntegerValue();
						} else if (text == 'tax') {
							tax = parser.getIntegerValue();
						} else if (text == 'error_code') {
							error_code = parser.readValueAs(Object.class);
						} else if (text == 'error_description') {
							error_description = parser.readValueAs(Object.class);
						} else if (text == 'error_source') {
							error_source = parser.readValueAs(Object.class);
						} else if (text == 'error_step') {
							error_step = parser.readValueAs(Object.class);
						} else if (text == 'error_reason') {
							error_reason = parser.readValueAs(Object.class);
						} else if (text == 'acquirer_data') {
							acquirer_data = new Acquirer_data(parser);
						} else if (text == 'created_at') {
							created_at = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Entity consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Payment {
		public Entity entity {get;set;} 

		public Payment(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'entity') {
							entity = new Entity(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Payment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String entity {get;set;} 
	public String account_id {get;set;} 
	public String event {get;set;} 
	public List<String> contains {get;set;} 
	public Payload payload {get;set;} 
	public Integer created_at {get;set;} 

	public PaymentCallback(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'entity') {
						entity = parser.getText();
					} else if (text == 'account_id') {
						account_id = parser.getText();
					} else if (text == 'event') {
						event = parser.getText();
					} else if (text == 'contains') {
						contains = arrayOfString(parser);
					} else if (text == 'payload') {
						payload = new Payload(parser);
					} else if (text == 'created_at') {
						created_at = parser.getIntegerValue();
					} else {
						System.debug(LoggingLevel.WARN, 'PaymentCallback consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Acquirer_data {
		public String rrn {get;set;} 
		public String upi_transaction_id {get;set;} 

		public Acquirer_data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rrn') {
							rrn = parser.getText();
						} else if (text == 'upi_transaction_id') {
							upi_transaction_id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Acquirer_data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Payload {
		public Payment payment {get;set;} 
		public Order order {get;set;} 

		public Payload(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'payment') {
							payment = new Payment(parser);
						} else if (text == 'order') {
							order = new Order(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Payload consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Notes {
		public String policy_name {get;set;} 

		public Notes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'policy_name') {
							policy_name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Notes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static PaymentCallback parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new PaymentCallback(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	




    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


}